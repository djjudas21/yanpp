#!/usr/bin/perl -wT

use strict;
use warnings;
use Net::Ping;
use Getopt::Long;
use Time::HiRes qw(usleep);
use List::Util qw( min max );
use lib "/usr/lib64/nagios/plugins" ;
use utils qw($TIMEOUT %ERRORS &print_revision &support &usage);
use vars qw($PROGNAME);
use vars qw($opt_V $opt_h $opt_w $opt_c $opt_H $opt_n $opt_s);

$PROGNAME = "check_yanpp";
sub print_help ();
sub print_usage ();

# Read in options
Getopt::Long::Configure ("bundling");
GetOptions
        ("V|version"    => \$opt_V,
         "h|help"       => \$opt_h,
         "w|warning=s"  => \$opt_w,
         "c|critical=s" => \$opt_c,
         "H|hostname=s" => \$opt_H,
         "n|number=i" => \$opt_n,
         "s|sleep=i" => \$opt_s);

# Print version
if ($opt_V) {
        print_revision($PROGNAME,'1.0.0');
        exit $ERRORS{'OK'};
}

# Print help
if ($opt_h) {
        print_help();
        exit $ERRORS{'OK'};
}

# Sanitise hostname, and print usage if we didn't get a valid one
$opt_H = shift unless ($opt_H);
print_usage() unless ($opt_H);
my $host = $1 if ($opt_H =~ m/^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+|[a-zA-Z][-a-zA-Z0]+(\.[a-zA-Z][-a-zA-Z0]+)*)$/);
print_usage() unless ($host);

# Default crit value
($opt_c) || ($opt_c = shift) || ($opt_c = '1000,50%');
my ($crit_rta,$crit_pl) = ($1,$2) if ($opt_c =~ /([0-9]+),([0-9]+)%/);

# Default warn value
($opt_w) || ($opt_w = shift) || ($opt_w = '100,10%');
my ($warn_rta,$warn_pl) = ($1,$2) if ($opt_w =~ /([0-9]+),([0-9]+)%/);

# Default n value (number of pings)
($opt_n) || ($opt_n = shift) || ($opt_n = 5);

# Default s value (sleep between pings)
($opt_s) || ($opt_s = shift) || ($opt_s = 10);

my @results = ();
my $count = 0;
for my $i (1..$opt_n) {
	my $p = Net::Ping->new('icmp');
	$p->hires();
	my ($ret, $duration, $ip) = $p->ping($host, 1);
	if ($ret) {
		push (@results, $duration);
		$count++;
	}
	$p->close();
	usleep(1000*$opt_s);
}

# Process the results
my $min = round(min(@results));
my $max = round(max(@results));
my $avg = round(average(\@results));
my $stdev = round(stdev(\@results));
my $success = $count/$opt_n;
my $packetloss = 100 * (1 - $success);

# Compare values to find status
# First the RTAs
my $warnflag = 0;
my $critflag = 0;
if ($avg > $crit_rta) {
        $critflag = 1;
} elsif ($avg > $warn_rta) {
        $warnflag = 1;
}

if ($packetloss > $crit_pl) {
	$critflag = 1;
} elsif ($packetloss > $warn_pl) {
	$warnflag = 1;
}

my $status;
if ($critflag == 1) {
	$status = 'CRITICAL';
} elsif ($warnflag == 1) {
	$status = 'WARNING';
} else {
	$status = 'OK';
}

print "PING $status - Packet loss = ${packetloss}%, RTA = ${avg}ms | Min=${min}ms;$warn_rta;$crit_rta Max=${max}ms;$warn_rta;$crit_rta Mean=${avg}ms;$warn_rta;$crit_rta 'Standard deviation'=${stdev}ms;$warn_rta;$crit_rta 'Packet loss'=${packetloss}%;$warn_pl;$crit_pl";
exit $ERRORS{$status};


# Print usage info for this program
sub print_usage () {
        print "Usage: $PROGNAME -H <host> [-w <warnrta>,<warnpl>%] [-c <critrta>,<critpl>%]\n";
}

# Print help
sub print_help () {
	print_revision($PROGNAME,'1.0.0');
        print "Copyright (c) 2016 Jonathan Gazeley\n";
        print "\n";
        print_usage();
        print "\n";
        print "-V --version\n";
        print "-h --help       Print this help message\n";
        print "-w --warning    Comma-separated warning thresholds for RTA and packet loss. Default: 100,10%\n";
        print "-c --critical   Comma-separated critical thresholds for RTA and packet loss. Default: 1000,50%\n";
        print "-H --hostname   Hostname or IP address to ping with ICMP packets\n";
        print "-n --number     Number of ICMP packets to send. Default: 5\n";
        print "-s --sleep      Time to wait between pings in milliseconds. Default: 10\n";
        print "\n";
        support();
}

# Calculate mean of an array of numbers
sub average {
        my($data) = @_;
        if (not @$data) {
                die("Empty arrayn");
        }
        my $total = 0;
        foreach (@$data) {
                $total += $_;
        }
        my $average = $total / @$data;
        return $average;
}

# Calculate standard deviation of an array of numbers
sub stdev {
        my($data) = @_;
        if(@$data == 1){
                return 0;
        }
        my $average = &average($data);
        my $sqtotal = 0;
        foreach(@$data) {
                $sqtotal += ($average-$_) ** 2;
        }
        my $std = ($sqtotal / (@$data-1)) ** 0.5;
        return $std;
}

# Round to 6 decimal places and format as milliseconds
sub round {
	my $number = shift;
	$number = $number * 1000000;
	$number = $number + 0.5;
	$number = int($number);
	$number = $number / 1000;
	return $number;
}
